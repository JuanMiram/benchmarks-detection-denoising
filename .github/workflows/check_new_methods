# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: check_incoming_methods

# on: workflow_dispatch

on:
  pull_request:
    branches: [ new_methods_branch ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
  # The type of runner that the job will run on
    strategy:
      matrix:
#         os: ["ubuntu-latest", "macos-latest"]
        os: ["ubuntu-latest"]
        # python-version: ["3.7", "3.8", "3.9"]
        python-version: ["3.8"]
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: "4.1.0" # The R version to download (if necessary) and use.
      
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1

        # with:
        #   virtualenvs-create: true
        #   virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install main (non-optional) and dev dependencies
        # see [tool.poetry.dependencies] and [tool.poetry.dev-dependencies]
        # in pyproject.toml
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install package
        run: poetry install

      #----------------------------------------------
      #    run test suite
      #----------------------------------------------
      - name: Test with pytest
        # Configuration of pytest [tool.pytest.ini_options] in pyproject.toml
        # https://docs.pytest.org/en/latest/reference/customize.html#pyproject-toml
        # In the template repository options passed are
        # -ra -q -vv --cov=spatstat_interface --cov-report=xml
        run: poetry run pytest
